name: Pull Request

on:
  pull_request: {}

permissions:
  contents: read

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  check:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    container:
      image: docker://docker.io/rust:1.60.0
    steps:
      - run: rustup component add clippy rustfmt
      - uses: olix0r/cargo-action-fmt@ee1ef42932e44794821dab57ef1bf7a73df8b21f
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: cargo fetch --locked
      - run: cargo clippy --all-targets --frozen --message-format=json | cargo-action-fmt
      - run: cargo fmt -- --check

  audit:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    # Prevent sudden announcement of a new advisory from failing Ci.
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
    - uses: EmbarkStudios/cargo-deny-action@30ecad1d5873c1cc2cad10a33637371ca094768b
      with:
        command: check bans licenses sources

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container:
      image: docker://docker.io/rust:1.60.0
    steps:
      - uses: olix0r/cargo-action-fmt@ee1ef42932e44794821dab57ef1bf7a73df8b21f
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: cargo fetch --locked
      - run: cargo test --no-run --frozen --message-format=json | cargo-action-fmt
      - run: cargo test --frozen

  rust-toolchain:
    name: rust toolchain
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: |
          ex=0

          # Check workflows against the version in rust-toolchain.
          for f in .github/workflows/* ; do
            versions=$(sed -nE 's|.*docker://(.*/)?rust:([^ #]+).*|\2|p' "$f")
            for mismatch in $(echo "$versions" | grep -vF "$(cat rust-toolchain)" || true) ; do
              echo "::error file=${f}::Workflow uses incorrect rust version(s): $mismatch"
              ex=$((ex + 1))
            done
          done

          exit $ex
